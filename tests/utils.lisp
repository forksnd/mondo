(defpackage #:mondo/tests/utils
  (:use #:cl
        #:rove
        #:mondo/utils))
(in-package #:mondo/tests/utils)

(deftest find-shortest-nickname
  (ok (equal (find-shortest-nickname '("COMMON-LISP-USER"))
             "COMMON-LISP-USER")
      "single package name")
  (ok (equal (find-shortest-nickname '("COMMON-LISP-USER" "CL-USER"))
             "CL-USER")
      "multiple package names"))

(deftest space-char-p
  (ok (signals (space-char-p nil))
      "signals when nil is given")
  (ok (null (space-char-p #\a))
      "'a' is not a space")
  (ok (null (space-char-p #\-))
      "'-' is not a space")
  (ok (null (space-char-p #\\))
      "'\\' is not a space")
  (ok (null (space-char-p #\0))
      "'0' is not a space")
  (ok (null (space-char-p #\あ))
      "'あ' is not a space")
  (ok (space-char-p #\Space)
      "white space is a space")
  (ok (space-char-p #\Newline)
      "newline is a space")
  (ok (space-char-p #\Tab)
      "tab is a space")
  (ok (space-char-p #\Return)
      "return is a space"))

(deftest string-space-trim
  (ok (signals (string-space-trim nil))
      "signal when nil is given")
  (ok (signals (string-space-trim #\a))
      "signal when #\\a is given")
  (ok (equal (string-space-trim "abc")
             "abc")
      "just return the same if no space around")
  (ok (equal (string-space-trim "a b  c")
             "a b  c")
      "don't remove spaces in chars")
  (ok (equal (string-space-trim "  abc")
             "abc")
      "remove left spaces")
  (ok (equal (string-space-trim "abc   ")
             "abc")
      "remove right spaces")
  (ok (equal (string-space-trim " abc   ")
             "abc")
      "remove both spaces")
  (ok (equal (string-space-trim (format nil " ~C~Ca b~C c ~C~C" #\Newline #\Tab #\Return #\Tab #\Return))
             (format nil "a b~C c" #\Return))
      "remove all space chars")
  (ok (equal (string-space-trim "        ")
             "")
      "return an empty string when it contains space chars only"))

(deftest integer-string-p
  (ok (signals (integer-string-p nil))
      "signal when nil is given")
  (ok (signals (integer-string-p #\a))
      "signal when #\\a is given")
  (ok (integer-string-p "0")
      "a single digit char")
  (ok (integer-string-p "01")
      "a multiple digit chars")
  (ok (integer-string-p " 1  ")
      "digit char with spaces around")
  (ok (null (integer-string-p ""))
      "empty string isn't an integer string")
  (ok (null (integer-string-p "a"))
      "no digit chars")
  (ok (null (integer-string-p "1 2"))
      "two digit chars with a space between"))
